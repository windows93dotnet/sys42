/* eslint-disable no-loss-of-precision */

// @src https://github.com/30-seconds/30-seconds-of-code/blob/v1.2.3/test/round.test.js

import test from "../../../../../42/test.js"
import { round } from "../../../../../42/fabric/type/number/precision.js"

test("round with precision", (t) => {
  t.is(round(1.009, 2), 1.01)
  t.is(round(1.006, 2), 1.01)
  t.is(round(1.005, 2), 1.01)
  t.is(round(1.004, 2), 1)
  t.is(round(1.003, 2), 1)

  t.is(round(0.009, 2), 0.01)
  t.is(round(0.006, 2), 0.01)
  t.is(round(0.005, 2), 0.01)
  t.is(round(0.004, 2), 0)
  t.is(round(0.003, 2), 0)

  t.is(round(-1.009, 2), -1.01)
  t.is(round(-1.006, 2), -1.01)
  t.is(round(-1.005, 2), -1)
  t.is(round(-1.004, 2), -1)
  t.is(round(-1.003, 2), -1)

  t.is(round(-0.009, 2), -0.01)
  t.is(round(-0.006, 2), -0.01)
  t.is(round(-0.005, 2), -0)
  t.is(round(-0.004, 2), -0)
  t.is(round(-0.003, 2), -0)

  t.is(round(1.555, 2), 1.56)
  t.is(round(1.5551, 2), 1.56)

  t.is(round(1.3555, 3), 1.356)
  t.is(round(1.355_51, 2), 1.36)
  t.is(round(123.342_334_534_534_534_534_4, 11), 123.342_334_534_53)
  t.is(round(3.342, 11), 3.342)
})

test("2 is the default precision", (t) => {
  t.is(round(1.009), 1.01)
})

test("invalid arguments returns NaN", (t) => {
  t.isNaN(round())
  t.isNaN(round("string"))
  t.isNaN(round([1.005, 2]))
  t.isNaN(round({ a: 132 }, 2))
})

test("don't return NaN with out of bounds arguments", (t) => {
  t.is(round(1_300_000.355_555_555_55, 2), 1_300_000.36)
  t.is(round(1_300_000.355_555_555_55, 50), 1_300_000.355_555_555_6)
})

test("floating-point number representation", (t) => {
  t.is(round(1.836_970_198_721_029_7e-16, 2), 0)
  t.is(round(-1.836_970_198_721_029_7e-16, 2), -0)

  t.is(round(1.836_970_198_721_029_7e-16, 14), 0)
  t.is(round(1.836_970_198_721_029_7e-16, 15), 0)
  t.is(round(1.836_970_198_721_029_7e-16, 16), 2e-16)
  t.is(round(1.836_970_198_721_029_7e-16, 17), 1.8e-16)
  t.is(round(1.836_970_198_721_029_7e-16, 18), 1.84e-16)
  t.is(round(1.836_970_198_721_029_7e-16, 19), 1.837e-16)
  t.is(round(1.836_970_198_721_029_7e-16, 20), 1.837e-16)
  t.is(round(1.836_970_198_721_029_7e-16, 21), 1.836_97e-16)
  t.is(round(1.836_970_198_721_029_7e-16, 22), 1.836_97e-16)
  t.is(round(1.836_970_198_721_029_7e-16, 23), 1.836_970_200_000_000_3e-16)
  t.is(round(1.836_970_198_721_029_7e-16, 24), 1.836_970_2e-16)
  t.is(round(1.836_970_198_721_029_7e-16, 25), 1.836_970_198_999_999_7e-16)

  t.is(round(-1.836_970_198_721_029_7e-16, 15), -0)
  t.is(round(-1.836_970_198_721_029_7e-16, 16), -2e-16)
  t.is(round(-1.836_970_198_721_029_7e-16, 17), -1.8e-16)
  t.is(round(-1.836_970_198_721_029_7e-16, 18), -1.84e-16)
  t.is(round(-1.836_970_198_721_029_7e-16, 19), -1.837e-16)
  t.is(round(-1.836_970_198_721_029_7e-16, 20), -1.837e-16)
  t.is(round(-1.836_970_198_721_029_7e-16, 21), -1.836_97e-16)
  t.is(round(-1.836_970_198_721_029_7e-16, 22), -1.836_97e-16)
  t.is(round(-1.836_970_198_721_029_7e-16, 23), -1.836_970_200_000_000_3e-16)
  t.is(round(-1.836_970_198_721_029_7e-16, 24), -1.836_970_2e-16)
  t.is(round(-1.836_970_198_721_029_7e-16, 25), -1.836_970_198_999_999_7e-16)
})

test("floating-point number representation", 2, (t) => {
  t.is(round(1.836_970_198_721_029_7e+21, 2), 1.836_970_198_721_029_7e+21)
  t.is(round(-1.836_970_198_721_029_7e+21, 2), -1.836_970_198_721_029_7e+21)
  t.is(round(1.836_970_198_721_029_7e+21, 20), 1.836_970_198_721_029_7e+21)
  t.is(round(-1.836_970_198_721_029_7e+21, 20), -1.836_970_198_721_029_7e+21)
})
