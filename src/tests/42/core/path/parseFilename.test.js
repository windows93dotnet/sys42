import test from "../../../../42/test.js"
import parseFilename from "../../../../42/core/path/parseFilename.js"

const { task } = test

test.tasks(
  [
    task({
      path: "https://localhost:4200/tests/a.js",
      expected: {
        origin: "https://localhost:4200",
        protocol: "https:",
        host: "localhost:4200",
        hostname: "localhost",
        port: "4200",
        pathname: "/tests/a.js",
        search: "",
        hash: "",
        isURI: true,
        isDir: false,
        isFile: false,
        filename: "/tests/a.js",
        dir: "/tests",
        base: "a.js",
        ext: ".js",
        stem: "a",
        charset: "utf-8",
        mimetype: "text/javascript",
        mime: {
          type: "text",
          subtype: "javascript",
          prefix: "javascript",
          suffix: "",
        },
      },
    }),

    task({
      path: "https://localhost:4200/tests/a.js",
      options: { getURIMimetype: false },
      expected: {
        origin: "https://localhost:4200",
        protocol: "https:",
        host: "localhost:4200",
        hostname: "localhost",
        port: "4200",
        pathname: "/tests/a.js",
        search: "",
        hash: "",
        isURI: true,
        isDir: false,
        isFile: false,
        filename: "/tests/a.js",
        dir: "/tests",
        base: "a.js",
        ext: ".js",
        stem: "a",
        charset: "utf-8",
        mimetype: "text/x-uri",
        mime: { type: "text", subtype: "x-uri", prefix: "x-uri", suffix: "" },
      },
    }),

    task({
      path: "a.js",
      expected: {
        origin: "file://",
        protocol: "file:",
        host: "",
        hostname: "",
        port: "",
        pathname: "/a.js",
        search: "",
        hash: "",
        isURI: false,
        isDir: false,
        isFile: true,
        filename: "/a.js",
        dir: "/",
        base: "a.js",
        ext: ".js",
        stem: "a",
        charset: "utf-8",
        mimetype: "text/javascript",
        mime: {
          type: "text",
          subtype: "javascript",
          prefix: "javascript",
          suffix: "",
        },
      },
    }),

    task({
      path: "a.js",
      options: { parseMimetype: false },
      expected: {
        origin: "file://",
        protocol: "file:",
        host: "",
        hostname: "",
        port: "",
        pathname: "/a.js",
        search: "",
        hash: "",
        isURI: false,
        isDir: false,
        isFile: true,
        filename: "/a.js",
        dir: "/",
        base: "a.js",
        ext: ".js",
        stem: "a",
        charset: "utf-8",
        mimetype: "text/javascript",
      },
    }),

    task({
      path: "a.js",
      options: { parseMimetype: false, headers: true },
      expected: {
        origin: "file://",
        protocol: "file:",
        host: "",
        hostname: "",
        port: "",
        pathname: "/a.js",
        search: "",
        hash: "",
        isURI: false,
        isDir: false,
        isFile: true,
        filename: "/a.js",
        dir: "/",
        base: "a.js",
        ext: ".js",
        stem: "a",
        charset: "utf-8",
        mimetype: "text/javascript",
        headers: {
          "Content-Type": "text/javascript; charset=utf-8",
        },
      },
    }),

    task({
      path: "a.rss",
      expected: {
        origin: "file://",
        protocol: "file:",
        host: "",
        hostname: "",
        port: "",
        pathname: "/a.rss",
        search: "",
        hash: "",
        isURI: false,
        isDir: false,
        isFile: true,
        filename: "/a.rss",
        dir: "/",
        base: "a.rss",
        ext: ".rss",
        stem: "a",
        charset: "utf-8",
        mimetype: "application/rss+xml",
        mime: {
          type: "application",
          subtype: "rss+xml",
          prefix: "rss",
          suffix: "xml",
        },
      },
    }),

    task({
      path: "README",
      expected: {
        origin: "file://",
        protocol: "file:",
        host: "",
        hostname: "",
        port: "",
        pathname: "/README",
        search: "",
        hash: "",
        isURI: false,
        isDir: false,
        isFile: true,
        filename: "/README",
        dir: "/",
        base: "README",
        ext: "",
        stem: "README",
        charset: "utf-8",
        mimetype: "text/plain",
        mime: {
          type: "text",
          subtype: "plain",
          prefix: "plain",
          suffix: "",
        },
      },
    }),

    task({
      path: "a/",
      expected: {
        origin: "file://",
        protocol: "file:",
        host: "",
        hostname: "",
        port: "",
        pathname: "/a/",
        search: "",
        hash: "",
        isURI: false,
        isDir: true,
        isFile: false,
        filename: "/a/",
        dir: "/",
        base: "a",
        ext: "",
        stem: "a",
        charset: undefined,
        mimetype: "inode/directory",
        mime: {
          type: "inode",
          subtype: "directory",
          prefix: "directory",
          suffix: "",
        },
      },
    }),

    task({
      path: "a.b/",
      expected: {
        origin: "file://",
        protocol: "file:",
        host: "",
        hostname: "",
        port: "",
        pathname: "/a.b/",
        search: "",
        hash: "",
        isURI: false,
        isDir: true,
        isFile: false,
        filename: "/a.b/",
        dir: "/",
        base: "a.b",
        ext: "",
        stem: "a.b",
        charset: undefined,
        mimetype: "inode/directory",
        mime: {
          type: "inode",
          subtype: "directory",
          prefix: "directory",
          suffix: "",
        },
      },
    }),

    task({
      path: "a/",
      options: { index: "index.html" },
      expected: {
        origin: "file://",
        protocol: "file:",
        host: "",
        hostname: "",
        port: "",
        pathname: "/a/",
        search: "",
        hash: "",
        isURI: false,
        isDir: false,
        isFile: true,
        filename: "/a/index.html",
        dir: "/a",
        base: "index.html",
        ext: ".html",
        stem: "index",
        charset: "utf-8",
        mimetype: "text/html",
        mime: { type: "text", subtype: "html", prefix: "html", suffix: "" },
      },
    }),
  ],

  (test, { path, options, expected }) => {
    test(path, options, (t) => {
      t.eq(parseFilename(path, options), expected)
    })
  }
)
